<template>
  <view>
    <view>基础使用</view>
    <canvas
      class="f2-canvas"
      canvas-id="GaugeBasic"
      @init="init"
      @touchstart="touchStart"
      @touchmove="touchMove"
      @touchend="touchEnd"
      @longtap="press">
    </canvas>
  </view>
</template>
<script>
import wepy from 'wepy';
import F2 from '@/plugins/f2-canvas/lib/f2';
import { F2Mixin } from '@/mixins';
let chart = null;
class GaugeBasic extends wepy.component {
  mixins = [F2Mixin];

  data = {
    canvasId: 'GaugeBasic',
    opts: {
      onInit: this.initChart
    }
  };

  initChart(canvas, width, height) {
    chart = new F2.Chart({
      el: canvas,
      width,
      height
    });

    let Shape = F2.Shape;
    let data = [
      {
        pointer: '当前收益',
        value: 5,
        length: 2,
        y: 1.05
      }
    ];
    //自定义绘制数据的的形状
    Shape.registerShape('point', 'dashBoard', {
      getPoints: function getPoints(cfg) {
        let x = cfg.x;
        let y = cfg.y;

        return [
          {
            x: x,
            y: y
          },
          {
            x: x,
            y: 0.4
          }
        ];
      },
      draw: function draw(cfg, container) {
        let point1 = cfg.points[0];
        let point2 = cfg.points[1];
        point1 = this.parsePoint(point1);
        point2 = this.parsePoint(point2);

        let line = container.addShape('Polyline', {
          attrs: {
            points: [point1, point2],
            stroke: '#1890FF',
            lineWidth: 2
          }
        });

        let text = cfg.origin._origin.value.toString();
        let text1 = container.addShape('Text', {
          attrs: {
            text: text + '%',
            x: cfg.center.x,
            y: cfg.center.y,
            fill: '#1890FF',
            fontSize: 24,
            textAlign: 'center',
            textBaseline: 'bottom'
          }
        });
        let text2 = container.addShape('Text', {
          attrs: {
            text: cfg.origin._origin.pointer,
            x: cfg.center.x,
            y: cfg.center.y,
            fillStyle: '#ccc',
            textAlign: 'center',
            textBaseline: 'top'
          }
        });

        return [line, text1, text2];
      }
    });

    chart.source(data, {
      value: {
        type: 'linear',
        min: 0,
        max: 15,
        ticks: [0, 5, 7.5, 10, 15],
        nice: false
      },
      length: {
        type: 'linear',
        min: 0,
        max: 10
      },
      y: {
        type: 'linear',
        min: 0,
        max: 1
      }
    });

    chart.coord('polar', {
      inner: 0,
      startAngle: -1.25 * Math.PI,
      endAngle: 0.25 * Math.PI
    });

    //配置value轴刻度线
    chart.axis('value', {
      tickLine: {
        strokeStyle: '#ccc',
        lineWidth: 2,
        length: -5
      },
      label: null,
      grid: null,
      line: null
    });

    chart.axis('y', false);

    //绘制仪表盘辅助元素
    chart.guide().arc({
      start: [0, 1.05],
      end: [4.8, 1.05],
      style: {
        strokeStyle: '#1890FF',
        lineWidth: 5,
        lineCap: 'round'
      }
    });
    chart.guide().arc({
      start: [5.2, 1.05],
      end: [9.8, 1.05],
      style: {
        strokeStyle: '#ccc',
        lineWidth: 5,
        lineCap: 'round'
      }
    });
    chart.guide().arc({
      start: [10.2, 1.05],
      end: [15, 1.05],
      style: {
        strokeStyle: '#ccc',
        lineWidth: 5,
        lineCap: 'round'
      }
    });
    chart.guide().arc({
      start: [0, 1.2],
      end: [15, 1.2],
      style: {
        strokeStyle: '#ccc',
        lineWidth: 1
      }
    });

    chart.guide().text({
      position: [-0.5, 1.3],
      content: '0.00%',
      style: {
        fillStyle: '#ccc',
        font: '18px Arial',
        textAlign: 'center'
      }
    });
    chart.guide().text({
      position: [7.5, 0.7],
      content: '7.50%',
      style: {
        fillStyle: '#ccc',
        font: '18px Arial',
        textAlign: 'center'
      }
    });
    chart.guide().text({
      position: [15.5, 1.3],
      content: '15.00%',
      style: {
        fillStyle: '#ccc',
        font: '18px Arial',
        textAlign: 'center'
      }
    });

    chart
      .point()
      .position('value*y')
      .size('length')
      .color('#1890FF')
      .shape('dashBoard');
    chart.render();

    return chart;
  }
}

export default GaugeBasic;
</script>
<style lang="less" scoped>
.f2-canvas {
  width: 100%;
  height: 500rpx;
}
</style>